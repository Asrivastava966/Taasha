"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const LoginLib_1 = require("../../../../lib/loginpage/LoginLib");
const HomepageLib_1 = require("../../../../lib/homepage/HomepageLib");
const AddPatientMode_1 = require("../../../../data/enums/AddPatientMode");
const AddPatientLib_1 = require("../../../../lib/normaladdpatientpage/AddPatientLib");
const Patient_1 = require("../../../../data/basedata/Patient");
const Insurance_1 = require("../../../../data/basedata/Insurance");
const OrderType_1 = require("../../../../data/enums/OrderType");
const CommonUtils_1 = require("../../../../utils/CommonUtils");
const InsuranceType_1 = require("../../../../data/enums/InsuranceType");
const Order_1 = require("../../../../data/basedata/Order");
const Product_1 = require("../../../../data/basedata/Product");
const UserInfo_1 = require("../../../../data/info/UserInfo");
const AdminDashboardLib_1 = require("../../../../lib/admindashboardpage/AdminDashboardLib");
const AdminDashboardBucket_1 = require("../../../../data/enums/AdminDashboardBucket");
const ResuppliesCampaignListLib_1 = require("../../../../lib/admindashboardpage/resupplycampaignsbucket/ResuppliesCampaignListLib");
const ResuppliesContactInformationLib_1 = require("../../../../lib/homepage/resuppliesbucket/resuppliescontactinformationpage/ResuppliesContactInformationLib");
const HomepageDashboardBucket_1 = require("../../../../data/enums/HomepageDashboardBucket");
const ResuppliesDashboardLib_1 = require("../../../../lib/homepage/resuppliesbucket/ResuppliesDashboardLib");
const ResuppliesDashboardBucket_1 = require("../../../../data/enums/ResuppliesDashboardBucket");
const ResupplyOrdersLib_1 = require("../../../../lib/homepage/resuppliesbucket/ResupplyOrdersLib");
const ISpokeWithPatientInfo_1 = require("../../../../data/info/ISpokeWithPatientInfo");
const ISpokeWithPatientAnswers_1 = require("../../../../data/enums/ISpokeWithPatientAnswers");
const ReportsBucket_1 = require("../../../../data/enums/ReportsBucket");
const ReportsLib_1 = require("../../../../lib/reportspage/ReportsLib");
const OrdersLib_1 = require("../../../../lib/reportspage/OrdersLib");
const PendingOrdersLib_1 = require("../../../../lib/homepage/pendingbucket/PendingOrdersLib");
const ContactPatientOrdersLib_1 = require("../../../../lib/homepage/contactpatientbucket/ContactPatientOrdersLib");
const Document_1 = require("../../../../data/basedata/Document");
const Tabs_1 = require("../../../../data/enums/Tabs");
const DocumentType_1 = require("../../../../data/enums/DocumentType");
const DeliveryTicketFormInfo_1 = require("../../../../data/info/DeliveryTicketFormInfo");
const FormsInfo_1 = require("../../../../data/info/FormsInfo");
let propertiesReader = require('properties-reader');
let orderInfoProperties = propertiesReader('ra_automation/data/properties/OrderInfo.file');
let userInfoProperties = propertiesReader('ra_automation/data/properties/UserInfo.file');
let commonUtils = new CommonUtils_1.CommonUtils();
describe('[SPEC]: Resupply Orders- I spoke with the patient: Workflow tests', function () {
    let loginLib;
    let homepageLib;
    let pendingOrdersLib;
    let contactPatientOrdersLib;
    let reportsLib;
    let reportsOrderLib;
    let addPatientLib;
    let adminDashboardLib;
    let resuppliesCampaignListLib;
    let resuppliesContactInformationLib;
    let resuppliesDashboardLib;
    let resupplyOrdersLib;
    let patient;
    let patientInfo;
    let insurance;
    let order;
    let product;
    let document;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            loginLib = new LoginLib_1.LoginLib();
            homepageLib = new HomepageLib_1.HomepageLib();
            pendingOrdersLib = new PendingOrdersLib_1.PendingOrdersLib();
            contactPatientOrdersLib = new ContactPatientOrdersLib_1.ContactPatientOrdersLib();
            reportsLib = new ReportsLib_1.ReportsLib();
            reportsOrderLib = new OrdersLib_1.OrdersLib();
            addPatientLib = new AddPatientLib_1.AddPatientLib();
            patient = new Patient_1.Patient(AddPatientMode_1.AddPatientMode.NORMAL_ADD);
            insurance = new Insurance_1.Insurance(AddPatientMode_1.AddPatientMode.NORMAL_ADD, InsuranceType_1.InsuranceType.PRIMARY);
            order = new Order_1.Order(AddPatientMode_1.AddPatientMode.NORMAL_ADD, OrderType_1.OrderType.AUTO_CPAP);
            product = new Product_1.Product();
            document = new Document_1.Document(Tabs_1.Tabs.ORDER, DocumentType_1.DocumentType.COMPLETED_DELIVERY_TICKET);
            adminDashboardLib = new AdminDashboardLib_1.AdminDashboardLib();
            resuppliesCampaignListLib = new ResuppliesCampaignListLib_1.ResuppliesCampaignListLib();
            resuppliesContactInformationLib = new ResuppliesContactInformationLib_1.ResuppliesContactInformationLib();
            resuppliesDashboardLib = new ResuppliesDashboardLib_1.ResuppliesDashboardLib();
            resupplyOrdersLib = new ResupplyOrdersLib_1.ResupplyOrdersLib();
            let a7035_hcpcsCode = 'A7035';
            let a7037_hcpcsCode = 'A7037';
            yield loginLib.doBaseLogin();
            yield homepageLib.selectAddPatientMode(AddPatientMode_1.AddPatientMode.NORMAL_ADD);
            patientInfo = yield patient.addBasePatient(true);
            yield addPatientLib.navigateToInsuranceInfoTab();
            yield insurance.addBaseInsurance(true);
            yield addPatientLib.navigateToOrdersTab();
            yield order.addBaseOrder(false);
            yield addPatientLib.getOrdersLib().getOrderInfoLib().getProductsGrid().deleteProductUsingHCPCSCode(a7035_hcpcsCode);
            yield addPatientLib.getOrdersLib().getOrderInfoLib().getProductsGrid().deleteProductUsingHCPCSCode(a7037_hcpcsCode);
            yield product.addBaseProduct(true);
            //Verify the added Insurance 
            let verificationDate = commonUtils.getDateFromString(orderInfoProperties.get('orders.insuranceverification.verificationdate'));
            yield addPatientLib.getOrdersLib().verifyInsurance(verificationDate);
            yield addPatientLib.getOrdersLib().navigateToOrderInfoTab();
            //Generate Delivery Ticket 
            let deliveryTicketFormInfo = new DeliveryTicketFormInfo_1.DeliveryTicketFormInfo();
            deliveryTicketFormInfo.setPatientSign(true);
            let formsInfo = new FormsInfo_1.FormsInfo();
            formsInfo.setDeliveryTicketFormInfo(deliveryTicketFormInfo);
            yield addPatientLib.getOrdersLib().generateForms(formsInfo);
            yield addPatientLib.getOrdersLib().getOrderInfoLib().saveOrder();
            yield addPatientLib.getOrdersLib().navigateToDocumentsTab();
            yield document.uploadTestDocument();
            yield addPatientLib.getOrdersLib().navigateToOrderInfoTab();
            yield addPatientLib.getOrdersLib().getOrderInfoLib().completeAndConfirmOrder();
            //Logout -> Login with an Admin User which has rights to trigger a Cron job 
            yield homepageLib.logout();
            //SU - Admin credentials 
            let sUserInfo = new UserInfo_1.UserInfo();
            sUserInfo.setUserName(userInfoProperties.get('userinfo.username.su.adminuser'));
            sUserInfo.setPassword(userInfoProperties.get('userinfo.password.su.adminuser'));
            let monthOffset = 4;
            let startDateOfCronJob = new Date(2019, 1, 1);
            let endDateOfCronJob = commonUtils.getDateWithOffset(monthOffset);
            yield loginLib.login(sUserInfo);
            yield homepageLib.navigateToAdminDashboardPage();
            yield adminDashboardLib.navigateToAdminDashboardBucket(AdminDashboardBucket_1.AdminDashboardBucket.RESUPPLY_CAMPAIGNS);
            yield resuppliesCampaignListLib.processCustomCronJob(startDateOfCronJob, endDateOfCronJob);
            yield homepageLib.logout();
            yield loginLib.doBaseLogin();
        });
    });
    it('[TEST]: Resupplies Contact Information > I spoke with the patient - Order cancelled', function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield homepageLib.navigateToHomepageDashboardBucket(HomepageDashboardBucket_1.HomepageDashboardBucket.RESUPPLIES);
            yield resuppliesDashboardLib.navigateToResuppliesDashboardBucket(ResuppliesDashboardBucket_1.ResuppliesDashboardBucket.NEW_ORDERS);
            yield resupplyOrdersLib.navigateToResuppliesContactInformationPage(patientInfo.getFirstName());
            let iSpokeWithPatientInfo = new ISpokeWithPatientInfo_1.ISpokeWithPatientInfo();
            iSpokeWithPatientInfo.setQuestionOneAnswer(ISpokeWithPatientAnswers_1.ISpokeWithPatientAnswers.NO);
            iSpokeWithPatientInfo.setQuestionTwoAnswer(ISpokeWithPatientAnswers_1.ISpokeWithPatientAnswers.NO);
            yield resuppliesContactInformationLib.getContactPatientLib().fillISpokeWithThePatientQuestionnaire(iSpokeWithPatientInfo);
            yield resuppliesContactInformationLib.getContactPatientLib().next();
            yield resuppliesContactInformationLib.getContactPatientLib().saveCancelResupplyOrderNote();
            let firstRowIndex = 1;
            yield homepageLib.navigateToReportsPage();
            yield reportsLib.navigateToReportsBucket(ReportsBucket_1.ReportsBucket.CANCELLED);
            yield reportsOrderLib.searchViaPatientNameFilter(patientInfo.getFirstName());
            yield expect(yield reportsOrderLib.getPatientName(firstRowIndex)).toContain(patientInfo.getFirstName());
        });
    });
    it('[TEST]: Resupplies Contact Information > I spoke with the patient - YYNN', function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield homepageLib.navigateToHomepageDashboardBucket(HomepageDashboardBucket_1.HomepageDashboardBucket.RESUPPLIES);
            yield resuppliesDashboardLib.navigateToResuppliesDashboardBucket(ResuppliesDashboardBucket_1.ResuppliesDashboardBucket.NEW_ORDERS);
            yield resupplyOrdersLib.navigateToResuppliesContactInformationPage(patientInfo.getFirstName());
            let iSpokeWithPatientInfo = new ISpokeWithPatientInfo_1.ISpokeWithPatientInfo();
            yield resuppliesContactInformationLib.getContactPatientLib().fillISpokeWithThePatientQuestionnaire(iSpokeWithPatientInfo);
            yield resuppliesContactInformationLib.getContactPatientLib().next();
            yield resuppliesContactInformationLib.getSuppliesLib().next();
            yield resuppliesContactInformationLib.getProcessResultLib().finish();
            yield resuppliesContactInformationLib.getProcessResultLib().save();
            yield resupplyOrdersLib.navigateToResuppliesDashboard();
            yield resuppliesDashboardLib.navigateBackToHomepageDashboard();
            yield homepageLib.navigateToHomepageDashboardBucket(HomepageDashboardBucket_1.HomepageDashboardBucket.PENDING);
            yield pendingOrdersLib.searchViaPatientNameFilter(patientInfo.getFirstName());
            let firstRowIndex = 1;
            expect(yield pendingOrdersLib.getPatientName(firstRowIndex)).toContain(patientInfo.getFirstName());
        });
    });
    it('[TEST]: Resupplies Contact Information > I spoke with the patient - YYYN', function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield homepageLib.navigateToHomepageDashboardBucket(HomepageDashboardBucket_1.HomepageDashboardBucket.RESUPPLIES);
            yield resuppliesDashboardLib.navigateToResuppliesDashboardBucket(ResuppliesDashboardBucket_1.ResuppliesDashboardBucket.NEW_ORDERS);
            yield resupplyOrdersLib.navigateToResuppliesContactInformationPage(patientInfo.getFirstName());
            let iSpokeWithPatientInfo = new ISpokeWithPatientInfo_1.ISpokeWithPatientInfo();
            iSpokeWithPatientInfo.setQuestionThreeAnswer(ISpokeWithPatientAnswers_1.ISpokeWithPatientAnswers.YES);
            yield resuppliesContactInformationLib.getContactPatientLib().fillISpokeWithThePatientQuestionnaire(iSpokeWithPatientInfo);
            yield resuppliesContactInformationLib.getContactPatientLib().next();
            yield resuppliesContactInformationLib.getSuppliesLib().next();
            yield resuppliesContactInformationLib.getProcessResultLib().finish();
            yield resuppliesContactInformationLib.getProcessResultLib().save();
            yield resupplyOrdersLib.navigateToResuppliesDashboard();
            yield resuppliesDashboardLib.navigateBackToHomepageDashboard();
            yield homepageLib.navigateToHomepageDashboardBucket(HomepageDashboardBucket_1.HomepageDashboardBucket.PENDING);
            yield pendingOrdersLib.searchViaPatientNameFilter(patientInfo.getFirstName());
            let firstRowIndex = 1;
            let expectedOrderTypeInPendingOrders = 'RESUPPLY';
            expect(yield pendingOrdersLib.getPatientName(firstRowIndex)).toContain(patientInfo.getFirstName());
            expect(yield pendingOrdersLib.getOrderType(firstRowIndex)).toContain(expectedOrderTypeInPendingOrders);
            yield homepageLib.navigateToHomepage();
            yield homepageLib.navigateToHomepageDashboardBucket(HomepageDashboardBucket_1.HomepageDashboardBucket.CONTACT_PATIENT);
            yield contactPatientOrdersLib.searchViaPatientNameFilter(patientInfo.getFirstName());
            let expectedOrderTypeInContactPatient = 'Patient-ReEducation';
            expect(yield pendingOrdersLib.getPatientName(firstRowIndex)).toContain(patientInfo.getFirstName());
            expect(yield pendingOrdersLib.getOrderType(firstRowIndex)).toContain(expectedOrderTypeInContactPatient);
        });
    });
    it('[TEST]: Resupplies Contact Information > I spoke with the patient - YYYY', function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield homepageLib.navigateToHomepageDashboardBucket(HomepageDashboardBucket_1.HomepageDashboardBucket.RESUPPLIES);
            yield resuppliesDashboardLib.navigateToResuppliesDashboardBucket(ResuppliesDashboardBucket_1.ResuppliesDashboardBucket.NEW_ORDERS);
            yield resupplyOrdersLib.navigateToResuppliesContactInformationPage(patientInfo.getFirstName());
            let iSpokeWithPatientInfo = new ISpokeWithPatientInfo_1.ISpokeWithPatientInfo();
            iSpokeWithPatientInfo.setQuestionThreeAnswer(ISpokeWithPatientAnswers_1.ISpokeWithPatientAnswers.YES);
            iSpokeWithPatientInfo.setQuestionFourAnswer(ISpokeWithPatientAnswers_1.ISpokeWithPatientAnswers.YES);
            yield resuppliesContactInformationLib.getContactPatientLib().fillISpokeWithThePatientQuestionnaire(iSpokeWithPatientInfo);
            yield resuppliesContactInformationLib.getContactPatientLib().next();
            yield resuppliesContactInformationLib.getSuppliesLib().next();
            yield resuppliesContactInformationLib.getProcessResultLib().finish();
            yield resuppliesContactInformationLib.getProcessResultLib().save();
            yield resupplyOrdersLib.navigateToResuppliesDashboard();
            yield resuppliesDashboardLib.navigateBackToHomepageDashboard();
            yield homepageLib.navigateToHomepageDashboardBucket(HomepageDashboardBucket_1.HomepageDashboardBucket.PENDING);
            yield pendingOrdersLib.searchViaPatientNameFilter(patientInfo.getFirstName());
            let firstRowIndex = 1;
            let expectedOrderTypeInPendingOrders = 'RESUPPLY';
            expect(yield pendingOrdersLib.getPatientName(firstRowIndex)).toContain(patientInfo.getFirstName());
            expect(yield pendingOrdersLib.getOrderType(firstRowIndex)).toContain(expectedOrderTypeInPendingOrders);
            yield homepageLib.navigateToHomepage();
            yield homepageLib.navigateToHomepageDashboardBucket(HomepageDashboardBucket_1.HomepageDashboardBucket.CONTACT_PATIENT);
            yield contactPatientOrdersLib.searchViaPatientNameFilter(patientInfo.getFirstName());
            let expectedOrderTypeInContactPatient = 'Patient-ReEducation';
            expect(yield pendingOrdersLib.getPatientName(firstRowIndex)).toContain(patientInfo.getFirstName());
            expect(yield pendingOrdersLib.getOrderType(firstRowIndex)).toContain(expectedOrderTypeInContactPatient);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,